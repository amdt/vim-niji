*niji.txt*                              Yet another rainbow parentheses plugin

FRONT MATTER                                             *niji-front-matter*

     Maintainer: Alastair Touw <alastair@touw.me.uk>
        License: Distributed under the same terms as Vim. See |license|.
        Version: 1.0.2
    Last Change: 2013 Jun 02


LICENSE                                                       *niji-license*

Niji is distributed under the same terms as Vim itself. See |license|
for details.


CONTENTS                                                     *niji-contents*

      i. Front Mattter  . . . . . . . . . . . . . . . . . |niji-font-matter|
     ii. License  . . . . . . . . . . . . . . . . . . . . . . |niji-license|
    iii. Contents . . . . . . . . . . . . . . . . . . . . .  |niji-contents|
      1. Usage & Introduction . . . . . . . . . .  |niji-introduction-usage|
      2. Installation . . . . . . . . . . . . . . . . .  |niji-installation|
           a) With a Plugin Manager . . . |niji-installation-plugin-manager|
           b) Using Vimball . . . . . . . . . .  |niji-installation-vimball|
           c) Manually  . . . . . . . . . . . . . |niji-installation-manual|
      3. Configuration  . . . . . . . . . . . . . . . . |niji-configuration|
           a) ‘g:loaded_niji’ .     . . . . . . . . . . . .  |'loaded_niji'|
           b) ‘g:niji_matching_filetypes’ . . .  |'niji_matching_filetypes'|
           c) ‘g:niji_match_all_filetypes’  . . |'niji_match_all_filetypes'|
           d) ‘g:niji_matching_characters’  . . |'niji_matching_characters'|
           e) Format for custom colour sets . . .   |niji-colour-set-format|
           f) ‘g:niji_colours’  . . . . . . . . . . . . . . |'niji_colours'|
           g) ‘g:niji_???_colours’  . . . . . . . . . . |'niji_???_colours'|
           h) ‘g:niji_weave_colours’  . . . . . . . . |'niji_weave_colours'|
      4. Credit Where It’s Due  . . . . . . . . . . . . . . . |niji-credits|
      5. Contributions  . . . . . . . . . . . . . . . . |niji-contributions|
      6. Version History  . . . . . . . . . . . . . . |niji-version-history|
      7. Known Issues . . . . . . . . . . . . . . . . .  |niji-known-issues|


USAGE AND INTRODUCTION                        *niji* *niji-introduction-usage*

虹 [Niji] (Rainbow) is yet another rainbow parentheses plugin for Vim. It’s
good for Common Lisp, Scheme and Clojure -- with two colour schemes --
out-of-the-box. Just install, and you’re good to go. The filetypes, matching
characters and colours Niji uses are completely configurable.


INSTALLATION                                             *niji-installation*

With a Plugin Manager:                    *niji-installation-plugin-manager*

Vundle: ~

If you don’t already have a preferred manager, I recommend installing Vundle
(http://github.com/gmarik/vundle). Once done, add the declaration for Niji to
your `.vimrc`:
>
    Bundle 'amdt/vim-niji'
<

And install:
>
    :BundleInstall
<

Pathogen: ~

If you’re using Tim Pope’s wonderful Pathogen
(http://github.com/tpope/vim-pathogen), simply extract the archive to
`$HOME/.vim/bundle` or better yet, clone the Git repository. In a UNIX shell,
for example:
>
    cd ~/.vim/bundle
    git clone git://github.com/amdt/vim-niji.git
<

Using Vimball:                                   *niji-installation-vimball*

Open the Vimball with Vim. For example, from a UNIX shell you might run:
>
    vim vim-niji.vbm
<
Once loaded in Vim, run the following two commands:
>
    :so %
    :q
<

Manually:                                         *niji-installation-manual*

Copy the files in the archive into your |'runtimepath'| as per the
following figure. The directory tree for Niji is on the left, and the
resulting tree in your own home directory on the right:

    /autoload                    :    `$HOME/.vim/autoload`
        niji.vim                 :        niji.vim
    /doc                         :    `$HOME/.vim/doc`
        niji.txt                 :        niji.txt
    /plugin                      :    `$HOME/.vim/plugin`
        niji.vim                 :        niji.vim
    CONTRIBUTING.markdown        :
    LICENSE.markdown             :
    README.markdown              :

    1. Place `/autoload/niji.vim` under `$HOME/.vim/autoload/`...
    2. Place `/doc/niji.txt` under `$HOME/.vim/doc/`...
    3. Place `/plugin/niji.vim` under `$HOME/.vim/plugin/`...

...where `$HOME` is the location of your `.vim` directory. You can find this
by typing `|:echo| |$HOME|`. You can safely discard of
`CONTRIBUTING.markdown`, `LICENSE.markdown`, and `README.markdown`.


CONFIGURATION                                           *niji-configuration*

‘g:loaded_niji’                                              *'loaded_niji'*

To disable Niji, just define this variable, for example:
>
    let g:loaded_niji = 1
<

‘g:niji_matching_filetypes’                      *'niji_matching_filetypes'*

By default, Niji gives you rainbow parentheses for the following three
|FileType|’s:

    1. `lisp`
    2. `scheme`
    3. `clojure`

You can override this setting by defining your own, for example:
>
    let g:niji_matching_filetypes = ['lisp', 'ruby', 'python']
<


‘g:niji_match_all_filetypes’                    *'niji_match_all_filetypes'*

If you want Niji to load for all filetypes, just define this variable:
>
    let g:niji_match_all_filetypes = 1
<


‘g:niji_matching_characters’                    *'niji_matching_characters'*

By default, Niji gives you rainbow highlighting for the following three sets
of characters:

    1. Parentheses: ‘(’ & ‘)’
    2. Brackets: ‘[’ & ‘]’
    3. Braces: ‘{’ & ‘}’

You can override this setting by defining your own, for example:
>
    let g:niji_matching_characters = [['(', ')'],
                                    \ ['\[', '\]'],
                                    \ ['<', '>']]
<

Note that you need to backslash escape square brackets (‘[’ and ‘]’).


Format for custom colour sets                       *niji-colour-set-format*

When you specify a custom colour set (the |'niji_colours'| variable) you can
use a few different formats.

    1. A list of pairs, for example:
>
    let g:niji_colours = [['brown', 'RoyalBlue3'],
                        \ ['darkred', 'DarkOrchid3'],
                        \ ['red', 'firebrick3']]
<
    2. A map containing light/dark lists of pairs, for example:
>
    let g:niji_colours = { 'dark': [['brown', 'RoyalBlue3'],
                                  \ ['darkred', 'DarkOrchid3'],
                                  \ ['red', 'firebrick3']],
                         \ 'light': [['Darkblue', 'firebrick3'],
                                   \ ['darkgreen', 'RoyalBlue3'],
                                   \ ['darkcyan', 'SeaGreen3']] }
<
    3. A list of strings, for example:
>
    let g:niji_colours = ['brown',
                        \ 'darkred',
                        \ 'red']
<
    4. A map containing light/dark lists of strings, for example:
>
    let g:niji_colours = { 'dark': ['brown',
                                  \ 'darkred',
                                  \ 'red'],
                         \ 'light': ['Darkblue',
                                  \ 'darkgreen',
                                  \ 'darkcyan'] }
<

Note If you specify pairs of colours, the first colour will be used for
consoles, while the second will be used for GUIs.


‘g:niji_colours’                                            *'niji_colours'*

To override the default colours for both light and dark modes, set
`g:niji_colours`.  For instance the following code uses the legacy colours
that older rainbow parentheses plugins used to use:
>
    let g:niji_colours = [['brown', 'RoyalBlue3'],
                        \ ['Darkblue', 'SeaGreen3'],
                        \ ['darkgray', 'DarkOrchid3'],
                        \ ['darkgreen', 'firebrick3'],
                        \ ['darkcyan', 'RoyalBlue3'],
                        \ ['darkred', 'SeaGreen3'],
                        \ ['darkmagenta', 'DarkOrchid3'],
                        \ ['brown', 'firebrick3'],
                        \ ['gray', 'RoyalBlue3'],
                        \ ['black', 'SeaGreen3'],
                        \ ['darkmagenta', 'DarkOrchid3'],
                        \ ['Darkblue', 'firebrick3'],
                        \ ['darkgreen', 'RoyalBlue3'],
                        \ ['darkcyan', 'SeaGreen3'],
                        \ ['darkred', 'DarkOrchid3'],
                        \ ['red', 'firebrick3']]
<

Note You can also specify a Dictionary (see |niji-colour-set-format|) if you
want different colours for light and dark backgrounds.

Note that your outer-most parenthesis colour comes first, and the inner-most
parenthesis colour comes last.

You can define as few or as many as you like, and Niji will cycle through each
of them as the nesting of your expressions increases.


‘g:niji_???_colours’                                     *'niji_???_colours'*

To specify a colour set specific to some colorscheme, add a variable called
`g:niji_colorscheme_colours` where "colorscheme" is the name of the current
colour scheme (you can check that with |:colorscheme|).  This variable follows
the same rules as |niji-colour-set-format| and has higher presedence than the
|'niji_colours'| variable.  For example, to set the colour scheme for
solarized, you might use:
>
    let g:niji_solarized_colours = { 'dark': [['brown', 'RoyalBlue3'],
                                            \ ['darkred', 'DarkOrchid3'],
                                            \ ['red', 'firebrick3']],
                                   \ 'light': [['Darkblue', 'firebrick3'],
                                             \ ['darkgreen', 'RoyalBlue3'],
                                             \ ['darkcyan', 'SeaGreen3']] }
<
‘g:niji_weave_colours’                                 *'niji_weave_colours'*
By default, Niji arranges colors much like that of a rainbow. If you want more
contrast you can add `let g:niji_weave_colours=1` to your ~/.vimrc to have the
cool colours woven between the warm colours.

Note the British spelling of ‘colour’.


CREDIT WHERE IT IS DUE                                         *niji-credits*

Whilst not a fork, Niji builds upon the work of various rainbow parantheses
plugins, starting with `RainbowParenthsis.vim` by John Gilmore,
`rainbow_parenthsis.vim` by Martin Krischik and Luc Hermitte, and
`rainbow_parentheses.vim` by ‘kien’. The figure below shows the rough history
and project pages for these plugins.

Niji also takes its default colour scheme from the Lisp syntax file provided
in distributions of Vim and written by Dr. Charles E. Campbell, Jr.

         `Niji` by Alastair Touw
    o    May 6, 2013.
    |    (http://github.com/amdt/vim-niji)
    |\
    | |  `rainbow_parentheses.vim` by ‘kien’
    o |  October 12, 2011.
    | |  (https://github.com/kien/rainbow_parentheses.vim)
    | |
    | o  `Lisp.vim` by Dr. Charles E. Campbell, Jr.
    |    November 16, 2010.
    |
    |    `rainbow_parenthsis.vim` by Martin Krischik & Luc Hermitte
    o    May 25, 2006.
    |    (http://www.vim.org/scripts/script.php?script_id=1561)
    |
    |    `RainbowParenthsis.vim` by John Gilmore
    o    March 5, 2005.
         (http://www.vim.org/scripts/script.php?script_id=1230)


CONTRIBUTIONS                                           *niji-contributions*

If you feel that Niji can be improved, pull requests and issues are
appreciated and humbly requested on the Github
project page (http://github.com/amdt/vim-niji).


VERSION HISTORY                                       *niji-version-history*

Niji follows the Semantic Versioning Specification (http://semver.org).

1.0.2 (Sun June 2, 2013) ~

    * Improve documentation.

1.0.1 (Sat May 4, 2013) ~

    * Add |GetLatestVimScripts| support.

1.0.0 (Sat May 4, 2013) ~

    * Initial release.


KNOWN ISSUES                                             *niji-known-issues*

For known issues (and to report your own), please see the issue tracker on the
Github project page (http://github.com/amdt/vim-niji/issues).


                                    * * *

vim:tw=78:ft=help:norl:
